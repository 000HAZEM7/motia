{
  "version": 3,
  "sources": ["../../src/core/MessageBus.js", "../../src/core/MotiaCore.js", "../../src/core/MotiaServer.js", "../../src/core/MotiaScheduler.js", "../../src/core/MotiaTest.js", "../../src/core/index.js"],
  "sourcesContent": ["/**\n * In-Memory Message Bus Implementation\n * ------------------------------------\n * The InMemoryMessageBus provides a simple, local-only event bus for the Motia framework.\n * It manages event subscribers and publishes events to them. This bus operates fully in-memory,\n * making it ideal for development, testing, and lightweight deployments.\n *\n * Key Responsibilities:\n * - Store a list of subscribers (event handlers)\n * - When an event is published, deliver it to all subscribers that match the event type\n * - Handle errors in subscriber callbacks gracefully\n *\n * This class does not persist events or maintain any external state,\n * and is not suitable for production scenarios that require durability or scaling.\n */\nexport class InMemoryMessageBus {\n  constructor() {\n    this.subscribers = [];\n  }\n\n  async publish(event, options) {\n    await Promise.all(\n      this.subscribers.map((subscriber) =>\n        subscriber(event, options).catch((error) => {\n          console.error(\"Error in subscriber:\", error);\n        })\n      )\n    );\n  }\n\n  subscribe(handler) {\n    this.subscribers.push(handler);\n  }\n}\n", "import { fileURLToPath, pathToFileURL } from \"url\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { InMemoryMessageBus } from \"./MessageBus.js\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * Core Orchestrator: MotiaCore\n * ----------------------------\n * MotiaCore serves as the central orchestrator of the Motia framework. It manages the lifecycle\n * of workflows, components, and the event bus, acting as the heart of the entire system.\n *\n * Key Responsibilities:\n * - Initialize and configure the message bus (either in-memory or a provided one)\n * - Load and register workflows and their associated components\n * - Emit events into the system and deliver them to subscribed components\n *\n * MotiaCore provides the foundational logic that ties together components, events,\n * and workflows, enabling flexible, event-driven behavior throughout the application.\n */\nexport class MotiaCore {\n  constructor() {\n    this.messageBus = new InMemoryMessageBus();\n    this.workflows = new Map();\n    this.components = new Map();\n  }\n\n  describeWorkflows() {\n    return {\n      workflows: Array.from(this.workflows.keys()).map((workflowPath) => {\n        const workflowName = path.basename(workflowPath);\n        const componentEntries = Array.from(this.components.entries()).filter(\n          ([compPath]) => compPath.includes(workflowName)\n        );\n\n        return {\n          name: workflowName,\n          components: componentEntries.map(([compPath, compModule]) => {\n            const compDirName = path.basename(path.dirname(compPath));\n            return {\n              id: compDirName,\n              subscribe: compModule.subscribe || [],\n            };\n          }),\n        };\n      }),\n    };\n  }\n\n  async registerWorkflow(workflowPath) {\n    try {\n      const configPath = path.resolve(workflowPath, \"config.js\");\n      const configModule = await import(pathToFileURL(configPath).href);\n      this.workflows.set(workflowPath, configModule);\n    } catch (error) {\n      console.error(`Error registering workflow at ${workflowPath}:`, error);\n    }\n  }\n\n  async registerComponent(componentPath) {\n    try {\n      // componentPath is absolute now\n      const componentModule = await import(pathToFileURL(componentPath).href);\n      if (componentModule.subscribe) {\n        this.components.set(componentPath, componentModule.default);\n      }\n    } catch (error) {\n      console.error(`Error registering component at ${componentPath}:`, error);\n    }\n  }\n\n  async emit(event, options) {\n    await this.messageBus.publish(event, options);\n  }\n\n  async initialize(options = {}) {\n    const workflowPaths = options.workflowPaths || [\"./src/workflows\"];\n    this.messageBus = options.messageBus || new InMemoryMessageBus();\n\n    this.workflows = new Map();\n    this.components = new Map();\n\n    // Convert workflowPaths to absolute\n    const absoluteWorkflowPaths = workflowPaths.map((p) => path.resolve(p));\n\n    // Load all workflows\n    for (const wPath of absoluteWorkflowPaths) {\n      const workflowFiles = await this.findWorkflowFiles(wPath);\n      for (const file of workflowFiles) {\n        await this.registerWorkflow(file);\n      }\n    }\n\n    // Load all components from these workflows\n    const componentFiles = await this.findComponentFiles(absoluteWorkflowPaths);\n    for (const file of componentFiles) {\n      await this.registerComponent(file);\n    }\n\n    // Subscribe components to message bus\n    for (const [id, component] of this.components.entries()) {\n      const moduleUrl = pathToFileURL(id).href;\n      const module = await import(moduleUrl);\n      if (module.subscribe) {\n        for (const eventPattern of module.subscribe) {\n          this.messageBus.subscribe(async (event, opts) => {\n            if (this.eventMatchesPattern(event.type, eventPattern)) {\n              await component(\n                event.data,\n                (e) => this.emit(e, opts),\n                event.type\n              );\n            }\n          });\n        }\n      }\n    }\n  }\n\n  async findWorkflowFiles(basePath) {\n    const workflows = [];\n    try {\n      const entries = await fs.promises.readdir(basePath, {\n        withFileTypes: true,\n      });\n      for (const entry of entries) {\n        if (entry.isDirectory()) {\n          const workflowPath = path.join(basePath, entry.name);\n          const files = await fs.promises.readdir(workflowPath);\n          if (files.includes(\"config.js\") && files.includes(\"version.json\")) {\n            // Return absolute path\n            workflows.push(path.resolve(workflowPath));\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error finding workflow files:\", error);\n    }\n    return workflows;\n  }\n\n  async findComponentFiles(paths) {\n    const components = [];\n    for (const basePath of paths) {\n      try {\n        const workflowDirs = await fs.promises.readdir(basePath, {\n          withFileTypes: true,\n        });\n\n        for (const workflowDir of workflowDirs) {\n          if (!workflowDir.isDirectory()) continue;\n\n          const componentsPath = path.join(\n            basePath,\n            workflowDir.name,\n            \"components\"\n          );\n          try {\n            await this.searchComponents(componentsPath, components);\n          } catch {\n            // If components dir doesn't exist, skip\n          }\n        }\n      } catch (error) {\n        console.error(\"Error finding component files:\", error);\n      }\n    }\n    return components.map((c) => path.resolve(c));\n  }\n\n  async searchComponents(dir, components) {\n    let entries;\n    try {\n      entries = await fs.promises.readdir(dir, { withFileTypes: true });\n    } catch {\n      return;\n    }\n\n    for (const entry of entries) {\n      const fullPath = path.join(dir, entry.name);\n      if (entry.isDirectory()) {\n        await this.searchComponents(fullPath, components);\n      } else if (\n        entry.name.endsWith(\".js\") &&\n        !entry.name.endsWith(\".test.js\")\n      ) {\n        components.push(fullPath);\n      }\n    }\n  }\n\n  eventMatchesPattern(eventType, pattern) {\n    if (pattern === \"*\") return true;\n    if (pattern === eventType) return true;\n    if (pattern.endsWith(\".*\")) {\n      const prefix = pattern.slice(0, -2);\n      return eventType.startsWith(prefix);\n    }\n    return false;\n  }\n}\n", "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath, pathToFileURL } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport class MotiaServer {\n  constructor() {\n    this.traffic = new Map();\n    this.express = express();\n    this.express.use(bodyParser.json());\n  }\n\n  async findTrafficFiles(paths) {\n    const trafficFiles = [];\n\n    const searchTraffic = async (dir) => {\n      let entries;\n      try {\n        entries = await fs.promises.readdir(dir, { withFileTypes: true });\n      } catch {\n        return;\n      }\n\n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        if (entry.isDirectory()) {\n          await searchTraffic(fullPath);\n        } else if (\n          entry.name.endsWith(\".js\") &&\n          !entry.name.endsWith(\".test.js\")\n        ) {\n          trafficFiles.push(fullPath);\n        }\n      }\n    };\n\n    for (const basePath of paths) {\n      const absolutePath = path.resolve(basePath);\n      await searchTraffic(absolutePath);\n    }\n\n    console.log(\"Found traffic files:\", trafficFiles);\n    return trafficFiles;\n  }\n\n  async initialize(core, trafficPaths = [\"./traffic/inbound\"]) {\n    this.core = core;\n    const trafficFiles = await this.findTrafficFiles(trafficPaths);\n\n    for (const trafficFile of trafficFiles) {\n      const trafficModule = await import(pathToFileURL(trafficFile));\n      const trafficConfigs = Array.isArray(trafficModule.default)\n        ? trafficModule.default\n        : [trafficModule.default];\n\n      for (const config of trafficConfigs) {\n        this.registerTraffic(config);\n      }\n    }\n\n    // Register routes for each traffic config\n    this.traffic.forEach((config, routePath) => {\n      this.express[config.method.toLowerCase()](routePath, async (req, res) => {\n        try {\n          await this.handleRequest(req, res);\n        } catch (error) {\n          res.status(500).json({ error: error.message });\n        }\n      });\n    });\n\n    // Serve static files\n    this.express.use(express.static(path.join(__dirname, \"../dist\")));\n\n    // Return workflow descriptions\n    this.express.get(\"/api/workflows\", (req, res) => {\n      res.json(this.core.describeWorkflows());\n    });\n\n    // Catch-all route to serve index.html\n    this.express.get(\"*\", (req, res) => {\n      res.sendFile(path.join(__dirname, \"../dist/index.html\"));\n    });\n\n    const port = process.env.PORT || 3000;\n    this.express.listen(port, () => {\n      console.log(`Server listening on port ${port}`);\n    });\n  }\n\n  async handleRequest(req, res) {\n    const traffic = this.traffic.get(req.path);\n    if (!traffic) {\n      res.status(404).json({ error: \"Traffic not found\" });\n      return;\n    }\n\n    try {\n      if (traffic.authorize) {\n        await traffic.authorize(req);\n      }\n\n      const event = await traffic.transform(req);\n\n      await this.core.emit(event, {\n        traceId: req.headers[\"x-trace-id\"],\n        metadata: {\n          source: \"http\",\n          path: req.path,\n          method: req.method,\n        },\n      });\n\n      res.status(200).json({ success: true, eventType: event.type });\n    } catch (error) {\n      res.status(400).json({ error: error.message });\n    }\n  }\n\n  registerTraffic(config) {\n    if (!config.path || !config.method || !config.transform) {\n      throw new Error(\"Invalid traffic configuration\");\n    }\n\n    const routePath = config.path.startsWith(\"/\")\n      ? config.path\n      : `/${config.path}`;\n    this.traffic.set(routePath, config);\n  }\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { pathToFileURL } from \"url\";\n\n/**\n * Time-Based Scheduling: MotiaScheduler\n * -------------------------------------\n * MotiaScheduler introduces time-based triggers into the Motia framework. It periodically emits\n * events based on defined schedules, enabling recurring or delayed actions.\n *\n * Key Responsibilities:\n * - Parse and manage time-based configurations (e.g., \"1h\", \"30m\")\n * - Set intervals or timers and emit corresponding events at defined intervals\n * - Integrate with workflows that depend on periodic checks or escalations\n *\n * This class allows workflows to incorporate scheduled behavior, such as escalating documents\n * if not approved within a certain time.\n */\nexport class MotiaScheduler {\n  constructor() {\n    this.schedules = new Map();\n    this.activeJobs = new Map();\n  }\n\n  async findScheduleFiles(paths) {\n    const fsPromises = fs.promises;\n    const schedules = [];\n\n    const searchSchedules = async (dir) => {\n      let entries;\n      try {\n        entries = await fsPromises.readdir(dir, { withFileTypes: true });\n      } catch {\n        return;\n      }\n\n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n        if (entry.isDirectory()) {\n          await searchSchedules(fullPath);\n        } else if (\n          entry.name.endsWith(\".js\") &&\n          !entry.name.endsWith(\".test.js\")\n        ) {\n          schedules.push(fullPath);\n        }\n      }\n    };\n\n    for (const basePath of paths) {\n      const schedulerPath = path.join(basePath, \"scheduler\");\n      await searchSchedules(schedulerPath);\n    }\n\n    return schedules;\n  }\n\n  async initialize(core, schedulePaths = [\"./src/workflows\"]) {\n    this.core = core;\n    const scheduleFiles = await this.findScheduleFiles(\n      schedulePaths.map((p) => path.resolve(p))\n    );\n\n    for (const file of scheduleFiles) {\n      const scheduleModule = await import(pathToFileURL(file).href);\n      if (scheduleModule.default) {\n        const id = file.replace(/\\.[jt]s$/, \"\");\n        this.schedules.set(id, scheduleModule.default);\n      }\n    }\n  }\n\n  start() {\n    this.schedules.forEach((schedule, id) => {\n      const interval = this.parseSchedule(schedule.interval);\n\n      const job = setInterval(() => {\n        this.core.emit(\n          {\n            type: schedule.eventType,\n            data: {\n              scheduledAt: new Date().toISOString(),\n              scheduleId: id,\n            },\n          },\n          {\n            metadata: {\n              source: \"scheduler\",\n              scheduleId: id,\n            },\n          }\n        );\n      }, interval);\n\n      this.activeJobs.set(id, job);\n    });\n  }\n\n  stop() {\n    this.activeJobs.forEach((job) => {\n      clearInterval(job);\n    });\n    this.activeJobs.clear();\n  }\n\n  parseSchedule(schedule) {\n    const timeRegex = /^(\\d+)(s|m|h|d)$/;\n    const match = schedule.match(timeRegex);\n    if (match) {\n      const [, value, unit] = match;\n      const num = parseInt(value, 10);\n      switch (unit) {\n        case \"s\":\n          return num * 1000;\n        case \"m\":\n          return num * 60 * 1000;\n        case \"h\":\n          return num * 60 * 60 * 1000;\n        case \"d\":\n          return num * 24 * 60 * 60 * 1000;\n        default:\n          return 0;\n      }\n    }\n\n    if (schedule.split(\" \").length === 5) {\n      // TODO: cron parsing\n      return 60 * 60 * 1000;\n    }\n\n    throw new Error(`Invalid schedule format: ${schedule}`);\n  }\n}\n", "/**\n * Testing Utilities: MotiaTest\n * ----------------------------\n * MotiaTest offers testing utilities to validate components, thresholds, and LLM logic within the Motia framework.\n * It provides mock emit functions, component test helpers, and performance test runners.\n *\n * Key Responsibilities:\n * - Create mock emit functions to simulate event emission in tests\n * - Provide helper functions for component-level testing and threshold verification\n * - Offer utilities for load testing and accuracy measurement of LLM outputs\n *\n * This class simplifies and standardizes how developers test their Motia-based workflows, ensuring reliability and correctness.\n */\nexport class MotiaTest {\n  static mockEmit() {\n    const mock = (...args) => {};\n    mock.mock = { calls: [] };\n    const wrapper = (event, options) => {\n      mock.mock.calls.push([event, options]);\n    };\n    return wrapper;\n  }\n\n  static createComponentTest(component, options) {\n    return async (input, emit) => {\n      const mockEmit = emit || MotiaTest.mockEmit();\n      // If mocks needed, must be handled outside this method for ESM.\n      await component(input, mockEmit, \"test.event\");\n    };\n  }\n\n  static createThresholdTest(component, options) {\n    return async () => {\n      const results = {\n        accuracy: 0,\n        latency: { p95: 0, p99: 0 },\n        successRate: 0,\n        totalRuns: 0,\n        errors: [],\n      };\n\n      const runTest = async (input) => {\n        const startTime = Date.now();\n        try {\n          const mockEmit = MotiaTest.mockEmit();\n          await component(input, mockEmit, \"test.event\");\n          results.totalRuns++;\n          return Date.now() - startTime;\n        } catch (error) {\n          results.errors.push(\n            error instanceof Error ? error : new Error(String(error))\n          );\n          return null;\n        }\n      };\n\n      if (options.loadTestOptions) {\n        const { rps, duration } = options.loadTestOptions;\n        const durationMs = parseDuration(duration);\n        const interval = 1000 / rps;\n        const endTime = Date.now() + durationMs;\n        const latencies = [];\n\n        while (Date.now() < endTime) {\n          for (const data of options.testData) {\n            const latency = await runTest(data);\n            if (latency) latencies.push(latency);\n            await sleep(interval);\n          }\n        }\n\n        latencies.sort((a, b) => a - b);\n        results.latency.p95 = latencies[Math.floor(latencies.length * 0.95)];\n        results.latency.p99 = latencies[Math.floor(latencies.length * 0.99)];\n      } else {\n        for (const data of options.testData) {\n          await runTest(data);\n        }\n      }\n\n      results.successRate =\n        (results.totalRuns - results.errors.length) / results.totalRuns;\n      return results;\n    };\n  }\n\n  static createLLMTest(component, options) {\n    return async () => {\n      const results = {\n        accuracy: 0,\n        consistency: 0,\n        averageConfidence: 0,\n        edgeCaseResults: [],\n        errors: [],\n      };\n\n      for (const data of options.testData) {\n        const outputs = [];\n        for (let i = 0; i < (options.consistencyRuns || 1); i++) {\n          const mockEmit = MotiaTest.mockEmit();\n          try {\n            await component(data, mockEmit, \"test.event\");\n            outputs.push(mockEmit.mock.calls[0]?.[0]?.data);\n          } catch (error) {\n            results.errors.push(\n              error instanceof Error ? error : new Error(String(error))\n            );\n          }\n        }\n\n        if (outputs.length > 1) {\n          results.consistency += calculateConsistency(outputs);\n        }\n      }\n\n      if (options.edgeCases) {\n        for (const edgeCase of options.edgeCases) {\n          const mockEmit = MotiaTest.mockEmit();\n          try {\n            await component(edgeCase.input, mockEmit, \"test.event\");\n            const output = mockEmit.mock.calls[0]?.[0]?.data;\n            results.edgeCaseResults.push({\n              input: edgeCase.input,\n              expected: edgeCase.expect,\n              actual: output,\n              passed: output === edgeCase.expect,\n            });\n          } catch (error) {\n            results.errors.push(\n              error instanceof Error ? error : new Error(String(error))\n            );\n          }\n        }\n      }\n\n      results.accuracy = calculateAccuracy(results.edgeCaseResults);\n      if (options.consistencyRuns) {\n        results.consistency /= options.testData.length;\n      }\n\n      return results;\n    };\n  }\n}\n", "export * from \"./MessageBus.js\";\nexport * from \"./MotiaCore.js\";\nexport * from \"./MotiaServer.js\";\nexport * from \"./MotiaScheduler.js\";\nexport * from \"./MotiaTest.js\";\n\n// Also export the utility functions if they're needed externally\nexport function defineTraffic(config) {\n  return config;\n}\n\nexport function defineRoute(config) {\n  return config;\n}\n"],
  "mappings": "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",
  "names": ["fs", "path", "fileURLToPath", "pathToFileURL", "__filename", "__dirname", "fs", "path", "pathToFileURL"]
}
